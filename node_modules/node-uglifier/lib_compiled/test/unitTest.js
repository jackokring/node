// Generated by CoffeeScript 1.7.1
(function() {
  var IS_RE_CREATE_TEST_FILES, NodeUglifier, fs, fsExtra, packageUtils, path;

  fs = require('fs');

  fsExtra = require('fs-extra');

  NodeUglifier = require("../NodeUglifier");

  packageUtils = require('../libs/packageUtils');

  path = require('path');

  IS_RE_CREATE_TEST_FILES = false;

  exports.testStuff = function(test) {
    var t0, t0_2, t1;
    t0 = "./test/test2";
    t0_2 = "onderscore";
    t1 = packageUtils.hexifyString(t0_2);
    console.log(t1);
    console.log("\n");
    return test.done();
  };

  exports.testPackageUtils = function(test) {
    var shouldBeResult1, shouldBeResult2;
    test.deepEqual(packageUtils.getMatchingFiles("lib_compiled/test/testproject/main.js", []), []);
    shouldBeResult1 = ['C:\\DEV\\GITHOME\\git5\\node-uglifier\\lib_compiled\\test\\testproject\\depa\\constants.js', 'C:\\DEV\\GITHOME\\git5\\node-uglifier\\lib_compiled\\test\\testproject\\depa\\constants.map'];
    test.deepEqual(packageUtils.getMatchingFiles("lib_compiled/test/testproject/", ["./depa/"]), shouldBeResult1);
    test.deepEqual(packageUtils.getMatchingFiles("lib_compiled/test/testproject", ["./depa/"]), shouldBeResult1);
    test.deepEqual(packageUtils.getMatchingFiles("lib_compiled/test/testproject/main.js", ["./depa/"]), shouldBeResult1);
    shouldBeResult2 = ['C:\\DEV\\GITHOME\\git5\\node-uglifier\\lib_compiled\\test\\testproject\\main\\main.js', 'C:\\DEV\\GITHOME\\git5\\node-uglifier\\lib_compiled\\test\\testproject\\main\\main.map', 'C:\\DEV\\GITHOME\\git5\\node-uglifier\\lib_compiled\\test\\testproject\\depb\\cryptoLoc.js', 'C:\\DEV\\GITHOME\\git5\\node-uglifier\\lib_compiled\\test\\testproject\\depb\\depDeep\\deepModule\\deepModule.js', 'C:\\DEV\\GITHOME\\git5\\node-uglifier\\lib_compiled\\test\\testproject\\depb\\depDeep\\deepModule\\deepModule.map'];
    test.deepEqual(packageUtils.getMatchingFiles("lib_compiled/test/testproject/main.js", ["main", "./depb/cryptoLoc.js", "./depb/depDeep/deepModule"]), shouldBeResult2);
    return test.done();
  };

  exports.testDependenciesExport = function(test) {
    var exportDir, nodeUglifier;
    exportDir = "lib_test_project_export/";
    nodeUglifier = new NodeUglifier("lib_compiled/test/testproject/main.js", {
      rngSeed: "hello"
    });
    nodeUglifier.exportDependencies(exportDir, {
      coffee: {
        src: "lib_compiled"
      }
    });
    test.ok(fsExtra.existsSync(path.resolve(exportDir)));
    test.ok(fsExtra.existsSync(path.resolve(exportDir + "/src")));
    test.ok(fsExtra.existsSync(path.resolve(exportDir + "/lib_compiled")));
    return test.done();
  };

  exports.testMerge = function(test) {
    var me, mergedSource, nodeUglifier, testFile;
    testFile = "lib_compiled/test/resultFiles/simpleMerge.js";
    nodeUglifier = new NodeUglifier("lib_compiled/test/testproject/main.js", {
      rngSeed: "hello"
    });
    mergedSource = nodeUglifier.merge().toString();
    try {
      eval(mergedSource);
    } catch (_error) {
      me = _error;
      test.fail(me.toString(), "expected no error thrown from combined project");
    }
    if (IS_RE_CREATE_TEST_FILES) {
      nodeUglifier.exportToFile(testFile);
    }
    test.equals(packageUtils.readFile(testFile).toString(), mergedSource);
    return test.done();
  };

  exports.testMergeWithFilter = function(test) {
    var mergedSource, nodeUglifier, testFile;
    testFile = "lib_compiled/test/resultFiles/simpleMergeWithFilter.js";
    nodeUglifier = new NodeUglifier("lib_compiled/test/testproject/main.js", {
      rngSeed: "hello",
      mergeFileFilter: ["./lib_static/test/", "./depa/constants.js"]
    });
    mergedSource = nodeUglifier.merge().toString();
    if (IS_RE_CREATE_TEST_FILES) {
      nodeUglifier.exportToFile(testFile);
    }
    test.equals(packageUtils.readFile(testFile).toString(), mergedSource);
    return test.done();
  };

  exports.testMergeWithFilterAndUglify = function(test) {
    var mergedSource, nodeUglifier, testFile, uglifySourceMap;
    testFile = "lib_compiled/test/resultFiles/simpleMergeWithFilterAndUglify.js";
    uglifySourceMap = "lib_compiled/test/resultFiles/sourcemaps/simpleMergeWithFilterAndUglify.js";
    nodeUglifier = new NodeUglifier("lib_compiled/test/testproject/main.js", {
      rngSeed: "hello",
      mergeFileFilter: ["./lib_static/test/", "./depa/constants.js"]
    });
    mergedSource = nodeUglifier.merge().uglify().toString();
    if (IS_RE_CREATE_TEST_FILES) {
      nodeUglifier.exportToFile(testFile);
    }
    nodeUglifier.exportSourceMaps(uglifySourceMap);
    test.equals(packageUtils.readFile(testFile).toString(), mergedSource);
    return test.done();
  };

  exports.testMergeWithFilterAndUglifyAndStrProtection = function(test) {
    var mergedSource, nodeUglifier, testFile, uglifySourceMap;
    testFile = "lib_compiled/test/resultFiles/simpleMergeWithFilterAndUglifyAndStrProtection.js";
    uglifySourceMap = "lib_compiled/test/resultFiles/sourcemaps/simpleMergeWithFilterAndUglifyAndStrProtection.js";
    nodeUglifier = new NodeUglifier("lib_compiled/test/testproject/main.js", {
      rngSeed: "hello",
      mergeFileFilter: ["./lib_static/test/", "./depa/constants.js"]
    });
    mergedSource = nodeUglifier.merge().uglify({
      strProtectionLvl: 1
    }).toString();
    if (IS_RE_CREATE_TEST_FILES) {
      nodeUglifier.exportToFile(testFile);
    }
    nodeUglifier.exportSourceMaps(uglifySourceMap);
    test.equals(packageUtils.readFile(testFile).toString(), mergedSource);
    return test.done();
  };

}).call(this);

//# sourceMappingURL=unitTest.map
